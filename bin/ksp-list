#!/usr/bin/perl -w
use strict;
use FindBin;
use lib "$FindBin::Bin/../lib";
use Getopt::Long;
use KeySigningParty::GPG;
use Crypt::GPG;
use Data::Dumper qw(Dumper);
use Term::ANSIColor qw(:constants);
use KeySigningParty::KeySender::Email;
use KeySigningParty::ConfigFile;



my ($output);
my ($cmd_help, $cmd_check, $cmd_sign, $cmd_mail, $cmd_mkconfig);
my ($opt_errors_only, $opt_quiet, $opt_local_sign, $opt_only_one, $opt_dry_run);
my ($opt_config);
my $opt_use_color = 1;

$| = 1;

GetOptions("output|o=s"       => \$output,
           "help|h"           => \$cmd_help,
           "quiet|q"          => \$opt_quiet,
           "errors-only|e"    => \$opt_errors_only,
           "check"            => \$cmd_check,
           "sign"             => \$cmd_sign,
           "local"            => \$opt_local_sign,
           "only-one"         => \$opt_only_one,
           "dry-run"          => \$opt_dry_run,
           "mail|email"       => \$cmd_mail,
           "config=s"         => \$opt_config,
           "mkconfig"         => \$cmd_mkconfig)
	or die "Getopt failed: $!";

unless( $cmd_help || $cmd_sign || $cmd_check || $cmd_mail ) {
	print "Command required. Try $0 --help.\n\n";
	exit(1);
}


if ( $cmd_help ) {
	print <<HELP;
Usage: $0 [options] keylist

Does operations on key lists: verification, signing, email

Commands:
	--check            Check fingerprints
        --help             Show this help
	--mail             Mail signed keys
        --sign             Sign keys

Options:
	--dry-run          Show what would happen
	--errors-only, -e  Only output errors
        --local            Make local, non-exportable signatures
	--only-one         Only process one line, debug option
	--output, -o file  Send output to file instead of stdout
	--quiet, -q        Do not output anything

Return code:
	0   Everything went fine
	1   Execution error
	2   Missing key detected
	4   Bad fingerprint detected

The missing key and bad fingerprint errors may be combined if both errors
are detected during execution.

HELP
	exit(0);
}

my $input = shift @ARGV;
my ($in, $out, $sent_fh);
my %sent;

if ( $input ) {
	open($in, '<', $input) or die "Can't open $input: $!";
} else {
	die "Input file required, try --help for help";
}

if ( $output ) {
	open($out, '>', $output) or die "Can't open $output: $!";
} else {
	open($out, '>&STDOUT') or die "Can't dup STDOUT: $!";
}

my $gpg = new KeySigningParty::GPG();
my $cgpg = new Crypt::GPG();


my $cf = KeySigningParty::ConfigFile->new( KSPGPG => $gpg );
my $config;

$cf->filename( $opt_config ) if ($opt_config);

if ( $cf->file_exists ) {
	$cf->load();
	$config = $cf->data;
}

if ( ($cmd_sign || $cmd_mail) && !$config ) {
	$cf->generate;
	
	die "A config file is required for --mail and --sign commands.\n".
	    "A default one has been generated for you at " . $cf->filename . "\n".
	    "Please check that the default settings are to your liking, and run this command again.";
}

if ( $cmd_mail ) {
	open($sent_fh, '+>>', "$input.sent") or die "Failed to open $input.sent: $!";

	# Load list of sent keys
	seek($sent_fh, 0, 0);
	while(my $line = <$sent_fh>) {
		chomp $line;
		$sent{$line} = 1;
	}
}


my $missing_key_err;
my $bad_fp_err;

while( my $line = <$in> ) {
	chomp $line;
	my ($uid, $fingerprint, $name) = split(/:/, $line);

	print $out "$uid: " unless ($opt_quiet || $opt_errors_only);

	my $key_ok;
	if ( $cmd_check || $cmd_sign || $cmd_mail ) {
		if ( !$gpg->key_exists($uid) ) {
			print $out "$uid: " if ( $opt_errors_only );
			print $out "NO KEY\n" unless ($opt_quiet);
			$missing_key_err = 1;
		} elsif ( !$gpg->check_fingerprint($uid, $fingerprint)) {
			print $out "$uid: " if ( $opt_errors_only );
			print $out "BAD FINGERPRINT\n" unless ($opt_quiet);
			$bad_fp_err = 1;
		} else {
			$key_ok = 1;
			print $out "OK\n" unless ($opt_errors_only || $opt_quiet);
		}
	}

	if ( $cmd_sign ) {
		unless( $key_ok ) {
			print "Verification of key $uid failed, not signing\n";
			next;
		}

		my @all_uids = @{$gpg->keys_uids->{$uid}};
		my @filtered = filter_uids(undef, @all_uids);

		my @sign;
		my $n=0;
		print "\tSigning:\n";
		print_uids(@filtered);


		@sign = get_field('num', @filtered);;

		my ($k) = $cgpg->keydb($uid);
		$cgpg->debug(1);
		
		foreach my $sec_key ( @{$config->{secret_keys}} ) {
			print "\tSigning with $sec_key\n";
			$cgpg->secretkey( $sec_key );
			$cgpg->certify($uid, $opt_local_sign, 0, @sign) unless ($opt_dry_run);
		}
	}

	if ( $cmd_mail ) {
		unless ( $key_ok ) {
			print "Verification of key $uid failed, not emailing\n";
			next;
		}

		if ( $sent{$uid} ) {
			print "Key already sent, skipping\n";
			next;
		}

		print "\tMailing to:\n";

		my @all_uids = @{$gpg->keys_uids->{$uid}};
		my @filtered = filter_uids(\&filter_emails, @all_uids);
		print_uids(@filtered);


		my @addrs = get_field('text', @filtered);
		print "\t\t" . scalar(@addrs) . " recipients\n";
		my $armored = $gpg->export_key( $uid );
		unless (@addrs) {
			print "\t\tNothing to email, skipping\n";
			next;
		}

		foreach my $sec_key ( @{$config->{secret_keys}} ) {
			
			my %args = %{$config->{'KeySigningParty::KeySender::Email'}};

			$args{cc} = [] unless ( exists $args{cc} );
			$args{my_key_id}     = $sec_key;
			$args{to}            = shift @addrs;
			$args{signed_key}    = $armored;
			$args{signed_key_id} = $uid;

			push $args{cc}, @addrs;


			eval {
				my $sender = KeySigningParty::KeySender::Email->new(%args);
				print $sender->send() unless ($opt_dry_run);
			};

			if ( $@ ) {
				print "Failed to send: $@";
				next;
			}
		}
		
		unless ($opt_dry_run) {
			$sent{$uid} = 1;
			print $sent_fh "$uid\n";
		}

	}

	exit 1 if ($opt_only_one);
}

my $ret = 0;
$ret |= 0x02 if ( $missing_key_err );
$ret |= 0x04 if ( $bad_fp_err );

exit($ret);

sub filter_emails {
	my ($uid_entry) = @_;
	return if ( $uid_entry->{image} );
	return unless ( $uid_entry->{text} =~ /@/ ); # Looks like an email address
	return 1;
}

sub filter_uids {
	my ($filter, @all_uids) = @_;

	my @ret;
	foreach my $u (@all_uids) {
		my $is_bad;
		my $state;

		next if ( $filter && !$filter->($u) );

		if ( $u->{expired} ) {
			$state = "EXPIRED ";
			$is_bad = 1;
		} elsif ( $u->{revoked} ) {
			$state = "REVOKED ";
			$is_bad = 1;
		} else {
			$state = "OK      ";
		}

		push @ret, { is_bad => $is_bad, state => $state, uid => $u };
	}

	return @ret;
}

sub print_uids {
	my ( @filtered ) = @_;
	foreach my $ue ( @filtered ) {
		if ( $opt_use_color ) {
			print $ue->{is_bad} ? RED : GREEN;
		}

		print "\t\t$ue->{state}";
		print RESET if ($opt_use_color);
		
		print $ue->{uid}->{text} . "\n";
	}
}

sub get_field {
	my ($field, @filtered) = @_;
	my @ret;
	foreach my $ue ( @filtered ) {
		next if ( $ue->{is_bad} );
		die "No field: $field. Fields: " . join(', ', keys %$ue) unless ( exists $ue->{uid}->{$field} );
		push @ret, $ue->{uid}->{$field};
	}

	return @ret;
}

sub load_config {
	my ($file) = @_;
	my $ret = do($file);
	return $ret;
}

