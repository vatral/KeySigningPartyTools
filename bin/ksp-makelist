#!/usr/bin/env perl
# Key signing party list generator
# Copyright (C) 2013 Vadim Troshchinskiy <me@vadim.ws>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#   
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use KeySigningParty::KeyList::FOSDEM;
use KeySigningParty::Output::PDF;
use KeySigningParty::VisualHash::QRCode;
use KeySigningParty::VisualHash::Vash;
use KeySigningParty::ConfigFile;
use KeySigningParty::GPG;
use KeySigningParty::StatusLine;

use Getopt::Long;

my $input_file;
my $output_file;
my $output_format = "PDF";
my ($list_total_keys, $keyring_total_keys);


GetOptions(
	"output|o=s" => \$output_file,
        "format|f=s" => \$output_format) or die "Getopt failed: $!";

$input_file = shift @ARGV;
die "Input file required" unless ($input_file);
die "Output file required" unless ($output_file);

my $gpg = KeySigningParty::GPG->new();
my $cf = KeySigningParty::ConfigFile->new(KSPGPG => $gpg);
if (!$cf->file_exists) {
	$cf->generate();
	die "Generated default config file at " . $cf->filename . ". Please check if everything looks good, and run this command again.";
}

$cf->load;
#my @trusted = (@{$cf->data->{secret_keys}}, @{$cf->data->{trusted_keys}});
$gpg->fully_trusted_keys([ @{$cf->data->{secret_keys}}, @{$cf->data->{trusted_keys}} ]);


$| = 1;

my $status = new KeySigningParty::StatusLine( twirling_baton => 1 );
my $list = new KeySigningParty::KeyList::FOSDEM(KSPGPG => $gpg);
$list->starting_hook(\&starting);
$list->progress_hook(\&list_progress);
$list->finalizing_hook(\&list_finalizing);
$list->load($input_file);


if ( $list_total_keys > $keyring_total_keys ) {
	print "\n";
	print "$list_total_keys keys were read from the list, but only $keyring_total_keys were found in your keyring.\n";
	print "For best performance, it is recommended that you download and import\n";
	print "the keyring for the meeting.\n\n";
	print "This will allow the program to include photos and to check which keys\n";
	print "have already been signed\n\n";
}
my $qr   = new KeySigningParty::VisualHash::QRCode();
#my $vash = new KeySigningParty::VisualHash::Vash();
my @hashes = ( $qr );

#if ( -f $vash->vash_jar ) {
#	push @hashes, $vash;
#}

my $out = create_object("KeySigningParty::Output::$output_format", "KeySigningParty::Output");

$out->list( $list );

if ( $out->isa("KeySigningParty::Output::PDF") ) {
	# HACK, FIXME!
	$out->visual_hashes( \@hashes );
}


$out->starting_hook( \&starting );
$out->progress_hook( \&progress );
$out->finalizing_hook( \&finalizing );
$out->generate($output_file);
print STDERR "\n";
print STDERR "Done.\n";

print "\n";



sub starting {
	$status->text("Starting...");
}
sub progress {
	my ($pdf, $page_num, $pages_total, $line_num, $lines_total) = @_;
	my $percent = sprintf("%.2f", (100/$lines_total) * $line_num);
	
	$status->text("Processing page $page_num of $pages_total, line $line_num of $lines_total, ${percent}% done.");
}
sub finalizing {
	$status->newline;
	print STDERR "Finalizing...";
}

sub list_progress {
	my ($list, $position, $total, $infile, $inring) = @_;
	my $percent = sprintf("%.2f", (100/$total)*$position);
	$status->text("Parsing list... ${percent}% done, $infile keys read from list, $inring found in keyring");

	$list_total_keys = $infile;
	$keyring_total_keys = $inring;
}

sub list_finalizing {
	$status->newline;
}

sub create_object {
	my ($class, $base) = @_;
	my $ret;
	
	eval "use $class;";
	if ( $@ ) {
		die "Can't load class $class: $@";
	}

	$ret = eval "new $class()";
	if ( $@ ) {
		die "Can't create an instance of $class: $@";
	} elsif (!$ret) {
		die "'new' method didn't return a value";
	} elsif (! $ret->isa($base)) {
		die "$ret isn't an object of type $base\n";
	}
	
	return $ret;
}

