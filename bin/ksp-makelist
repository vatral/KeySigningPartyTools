#!/usr/bin/env perl
# Key signing party list generator
# Copyright (C) 2013 Vadim Troshchinskiy <me@vadim.ws>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#   
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use KeySigningParty::KeyList::FOSDEM;
use KeySigningParty::Output::PDF;
use KeySigningParty::VisualHash::QRCode;
use KeySigningParty::VisualHash::Vash;
use Getopt::Long;

my $input_file;
my $output_file;

my $prev_length = 0;

GetOptions(
	"output|o=s" => \$output_file) or die "Getopt failed: $!";
$input_file = shift @ARGV;
die "Input file required" unless ($input_file);
die "Output file required" unless ($output_file);



$| = 1;
my $list = new KeySigningParty::KeyList::FOSDEM();
$list->load($input_file);

my $qr   = new KeySigningParty::VisualHash::QRCode();
my $vash = new KeySigningParty::VisualHash::Vash();

my $out = new KeySigningParty::Output::PDF( list => $list, visual_hashes => [ $qr, $vash ] );
$out->starting_hook( \&starting );
$out->progress_hook( \&progress );
$out->finalizing_hook( \&finalizing );
$out->generate($output_file);
status("Done.");
print "\n";


sub starting {
	status("Starting...");
}
sub progress {
	my ($pdf, $page_num, $pages_total, $line_num, $lines_total) = @_;
	my $percent = sprintf("%.2f", (100/$lines_total) * $line_num);
	
	status("Processing page $page_num of $pages_total, line $line_num of $lines_total, ${percent}% done.");
}
sub finalizing {
	status("Finalizing...");
}

sub status {
	my $text = shift;
	print "\r$text";
	
	if ( length($text) < $prev_length ) {
		print " " x ( $prev_length - length($text) );
		print "\r$text";
	}
	
	$prev_length = length($text);
}
